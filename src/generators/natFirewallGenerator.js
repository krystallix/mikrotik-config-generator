const fs = require('fs');
const path = require('path');
const { getCurrentUTCDateTime, getDateFormatted } = require('../utils/dateUtils');
const { ensureDirectoryExists } = require('../utils/fileUtils');

function generateNATConfigs(startNumber, count, toAddress) {
    let contents = [];
    
    contents.push(`# Generated on: ${getCurrentUTCDateTime()}`);
    contents.push(`# Generated by: krystallix`);
    contents.push('');
    contents.push('/ip firewall nat');

    for (let i = 0; i < count; i++) {
        const currentNumber = startNumber + i;
        contents.push(`add action=dst-nat chain=dstnat comment=BlockIP-${currentNumber} disabled=yes protocol=tcp \\\
    src-address-list=mangle-${currentNumber} to-addresses=${toAddress} to-ports=80`);
    }

    return contents.join('\n');
}

function handleNATFirewallGeneration(readline, OUTPUT_PATH, showMainMenu) {
    readline.question('Enter starting number: ', (startNum) => {
        readline.question('Enter how many configurations to generate: ', (count) => {
            readline.question('Enter IP to-addresses: ', (toAddress) => {
                try {
                    // Validate IP address format
                    if (!/^(\d{1,3}\.){3}\d{1,3}$/.test(toAddress)) {
                        throw new Error('Invalid IP address format');
                    }

                    ensureDirectoryExists(OUTPUT_PATH);
                    const fileName = `nat-firewall-${getDateFormatted()}.txt`;
                    const fullPath = path.join(OUTPUT_PATH, fileName);

                    const content = generateNATConfigs(parseInt(startNum), parseInt(count), toAddress);
                    fs.writeFileSync(fullPath, content);

                    console.log(`\nSuccess! File generated: ${fullPath}`);
                    console.log(`Generated ${count} NAT Firewall rules starting from BlockIP-${startNum}`);
                    console.log(`All rules configured with to-addresses=${toAddress}`);
                } catch (error) {
                    console.error('Error:', error.message);
                }
                showMainMenu();
            });
        });
    });
}

module.exports = {
    generateNATConfigs,
    handleNATFirewallGeneration
};