const fs = require('fs');
const path = require('path');
const { getCurrentUTCDateTime, getDateFormatted } = require('../utils/dateUtils');
const { ensureDirectoryExists } = require('../utils/fileUtils');

function generateVPNConfigs(startNumber, count) {
    let contents = [];
    
    contents.push(`# Generated on: ${getCurrentUTCDateTime()}`);
    contents.push(`# Generated by: krystallix`);
    contents.push('');
    contents.push('/ppp profile');

    for (let i = 0; i < count; i++) {
        const currentNumber = startNumber + i;
        contents.push(`add name=VPN-${currentNumber} on-down="\\\
    \\n/ip firewall nat enable [find comment=BlockIP-${currentNumber}]" on-up="\\\
    \\n/ip firewall nat disable [find comment=BlockIP-${currentNumber}]"`);
    }
    return contents.join('\n');
}

function handleVPNProfileGeneration(readline, OUTPUT_PATH, showMainMenu) {
    readline.question('Enter starting number: ', (startNum) => {
        readline.question('Enter how many configurations to generate: ', (count) => {
            try {
                ensureDirectoryExists(OUTPUT_PATH);
                const fileName = `vpn-configs-${getDateFormatted()}.txt`;
                const fullPath = path.join(OUTPUT_PATH, fileName);

                const content = generateVPNConfigs(parseInt(startNum), parseInt(count));
                fs.writeFileSync(fullPath, content);

                console.log(`\nSuccess! File generated: ${fullPath}`);
                console.log(`Generated ${count} VPN configurations starting from VPN-${startNum}`);
            } catch (error) {
                console.error('Error generating file:', error);
            }
            showMainMenu();
        });
    });
}

module.exports = {
    generateVPNConfigs,
    handleVPNProfileGeneration
};