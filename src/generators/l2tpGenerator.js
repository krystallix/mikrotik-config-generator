const fs = require('fs');
const path = require('path');
const { getCurrentUTCDateTime, getDateFormatted } = require('../utils/dateUtils');
const { ensureDirectoryExists } = require('../utils/fileUtils');

function generateL2TPConfigs(jsonData) {
    let contents = [];
    
    contents.push(`# Generated on: ${getCurrentUTCDateTime()}`);
    contents.push(`# Generated by: krystallix`);
    contents.push('');
    contents.push('/interface l2tp-client');

    const clients = JSON.parse(jsonData);
    clients.forEach((client, index) => {
        const number = index + 1;
        contents.push(`add connect-to=${client.dial} disabled=no name=VPN-${number} profile=VPN-${number} \\\
    user=${client.username} password=${client.password}`);
    });

    return contents.join('\n');
}

function handleL2TPClientGeneration(readline, OUTPUT_PATH, showMainMenu) {
    console.log('\nPlease paste your JSON configuration below and press Enter:');
    console.log('Example format:');
    console.log(`[
  {
    "dial": "server.example.com",
    "username": "user1",
    "password": "pass1"
  }
]`);

    let jsonInput = '';

    // Create a new interface for JSON input
    const rlJson = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
    });

    rlJson.on('line', (line) => {
        if (line.trim()) {
            jsonInput += line;
        } else {
            try {
                JSON.parse(jsonInput); // Validate JSON
                
                const fileName = `l2tp-clients-${getDateFormatted()}.txt`;
                const fullPath = path.join(OUTPUT_PATH, fileName);
                
                ensureDirectoryExists(OUTPUT_PATH);
                const content = generateL2TPConfigs(jsonInput);
                fs.writeFileSync(fullPath, content);

                console.log(`\nSuccess! File generated: ${fullPath}`);
                rlJson.close();
                showMainMenu();
            } catch (error) {
                console.error('\nError: Invalid JSON format. Please try again.');
                jsonInput = '';
                rlJson.close();
                showMainMenu();
            }
        }
    });
}

module.exports = {
    generateL2TPConfigs,
    handleL2TPClientGeneration
};