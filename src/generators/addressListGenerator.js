const fs = require('fs');
const path = require('path');
const { getCurrentUTCDateTime, getDateFormatted } = require('../utils/dateUtils');
const { ensureDirectoryExists } = require('../utils/fileUtils');
const { generateIPRange } = require('../utils/ipUtils');

function generateAddressListConfigs(jsonData) {
    let contents = [];
    
    contents.push(`# Generated on: ${getCurrentUTCDateTime()}`);
    contents.push(`# Generated by: krystallix`);
    contents.push('');
    contents.push('/ip firewall address-list');

    const ranges = JSON.parse(jsonData);
    ranges.forEach(range => {
        const addresses = generateIPRange(range.start, range.end);
        let mangleCounter = 1;
        
        addresses.forEach(ip => {
            contents.push(`add address=${ip} list=mangle-${mangleCounter}`);
            // Reset counter to 1 if it reaches 61, otherwise increment
            mangleCounter = mangleCounter >= 61 ? 1 : mangleCounter + 1;
        });
    });

    return contents.join('\n');
}

function handleAddressListGeneration(readline, OUTPUT_PATH, showMainMenu) {
    console.log('\nPlease paste your JSON configuration below and press Enter:');
    console.log('Example format:');
    console.log(`[
  {"start": "172.17.0.1", "end": "172.17.0.61"},
  {"start": "172.17.0.62", "end": "172.17.0.122"}
]`);

    let jsonInput = '';

    // Create a new interface for JSON input
    const rlJson = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
    });

    rlJson.on('line', (line) => {
        if (line.trim()) {
            jsonInput += line;
        } else {
            try {
                // Validate JSON
                JSON.parse(jsonInput);
                
                const fileName = `address-list-${getDateFormatted()}.txt`;
                const fullPath = path.join(OUTPUT_PATH, fileName);
                
                ensureDirectoryExists(OUTPUT_PATH);
                const content = generateAddressListConfigs(jsonInput);
                fs.writeFileSync(fullPath, content);

                console.log(`\nSuccess! File generated: ${fullPath}`);
                rlJson.close();
                showMainMenu();
            } catch (error) {
                console.error('\nError: Invalid JSON format. Please try again.');
                jsonInput = '';
                rlJson.close();
                showMainMenu();
            }
        }
    });
}

module.exports = {
    generateAddressListConfigs,
    handleAddressListGeneration
};